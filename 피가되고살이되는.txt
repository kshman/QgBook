###########################################
툴박스 만들기

// ... 기존 코드 생략 ...

// 툴박스(버튼 박스) 생성 함수
static GtkWidget* create_toolbox(ReadWindow* rw)
{
    GtkWidget* box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 6);

    GtkWidget* btn1 = gtk_button_new_with_label("툴1");
    GtkWidget* btn2 = gtk_button_new_with_label("툴2");
    gtk_box_append(GTK_BOX(box), btn1);
    gtk_box_append(GTK_BOX(box), btn2);

    // 스타일: 반투명, 둥근 모서리 등 필요시 CSS 적용 가능

    gtk_widget_set_margin_end(box, 16);
    gtk_widget_set_margin_bottom(box, 16);

    // 처음엔 숨김
    gtk_widget_set_visible(box, FALSE);

    return box;
}

// read_window_new 내부에서 main_box 대신 overlay 사용
GtkWidget* overlay = gtk_overlay_new();
gtk_overlay_set_child(GTK_OVERLAY(overlay), rw->draw);

// 툴박스 생성 및 overlay에 추가
GtkWidget* toolbox = create_toolbox(rw);
gtk_overlay_add_overlay(GTK_OVERLAY(overlay), toolbox);

// 툴박스 토글 버튼(예: 단축키, 별도 버튼 등으로 제어)
void toggle_toolbox(GtkButton* btn, gpointer user_data) {
    GtkWidget* toolbox = GTK_WIDGET(user_data);
    gtk_widget_set_visible(toolbox, !gtk_widget_get_visible(toolbox));
}

// 예시: 헤더바에 토글 버튼 추가
GtkWidget* toggle_btn = gtk_button_new_with_label("툴박스");
g_signal_connect(toggle_btn, "clicked", G_CALLBACK(toggle_toolbox), toolbox);
gtk_header_bar_pack_end(GTK_HEADER_BAR(header), toggle_btn);

// overlay를 메인 컨테이너로 사용
gtk_window_set_child(GTK_WINDOW(rw->window), overlay);




##################################

#include <gtk/gtk.h>
#include <gdk-pixbuf/gdk-pixbuf.h>

typedef struct {
    GdkPixbufAnimation* animation;
    GdkPixbufAnimationIter* iter;
    GtkWidget* widget;
    guint timer_id;
} GifAnimation;

// 타이머 콜백 함수
static gboolean gif_animation_tick(gpointer user_data) {
    GifAnimation* anim = user_data;
    int delay = gdk_pixbuf_animation_iter_get_delay_time(anim->iter);
    if (gdk_pixbuf_animation_iter_advance(anim->iter, NULL)) {
        gtk_picture_set_pixbuf(GTK_PICTURE(anim->widget),
            gdk_pixbuf_animation_iter_get_pixbuf(anim->iter));
    }
    return TRUE; // 타이머 유지
}

// GIF 애니메이션 시작 함수
void start_gif_animation(GtkWidget* picture, const char* filename) {
    GifAnimation* anim = g_new0(GifAnimation, 1);
    anim->animation = gdk_pixbuf_animation_new_from_file(filename, NULL);
    anim->iter = gdk_pixbuf_animation_get_iter(anim->animation, NULL);
    anim->widget = picture;

    gtk_picture_set_pixbuf(GTK_PICTURE(picture),
        gdk_pixbuf_animation_iter_get_pixbuf(anim->iter));

    int delay = gdk_pixbuf_animation_iter_get_delay_time(anim->iter);
    anim->timer_id = g_timeout_add(delay > 0 ? delay : 100, gif_animation_tick, anim);
}


#include <stdbool.h>
#include <string.h>
#include <glib.h>

// GIF 애니메이션 여부 판별
bool is_gif_animated(GBytes* data) {
    gsize size;
    const guint8* bytes = g_bytes_get_data(data, &size);
    int gce_count = 0;
    for (gsize i = 0; i + 1 < size; ++i) {
        if (bytes[i] == 0x21 && bytes[i+1] == 0xF9) {
            gce_count++;
            if (gce_count > 1) return true;
        }
    }
    return false;
}

// WebP 애니메이션 여부 판별
bool is_webp_animated(GBytes* data) {
    gsize size;
    const guint8* bytes = g_bytes_get_data(data, &size);
    // 최소한 RIFF + size + WEBP + VP8X + chunk header + 10 bytes
    if (size < 30) return false;
    // RIFF 헤더 확인
    if (memcmp(bytes, "RIFF", 4) != 0 || memcmp(bytes+8, "WEBP", 4) != 0)
        return false;
    // VP8X 청크 찾기
    for (gsize i = 12; i + 8 < size; ) {
        if (memcmp(bytes + i, "VP8X", 4) == 0) {
            // VP8X 청크의 5번째 바이트(Feature Flags)에서 0x02 비트 확인
            if (i + 8 < size && (bytes[i+8] & 0x02))
                return true;
            break;
        }
        // 다음 청크로 이동 (4바이트 타입 + 4바이트 크기)
        guint32 chunk_size = bytes[i+4] | (bytes[i+5]<<8) | (bytes[i+6]<<16) | (bytes[i+7]<<24);
        i += 8 + chunk_size + (chunk_size % 2); // 패딩 처리
    }
    return false;
}







#if false
// 셀 편집 기능 만들던거
// 빌드 안됨
// 이 코드는 보관용으로 유지됩니다. 향후 셀 편집 기능을 구현하거나 디버깅할 때 참고용으로 사용될 수 있습니다.

// 편집용 Entry를 동적으로 삽입
static void start_edit_alias(MoveDialog* self, guint row)
{
	GtkColumnView* view = GTK_COLUMN_VIEW(self->move_list);
	GtkListItem* item = gtk_column_view_get_row(view, row);
	if (!item) return;

	MoveObject* obj = gtk_list_item_get_item(item);
	if (!obj) return;

	GtkWidget* entry = gtk_entry_new();
	gtk_entry_set_text(GTK_ENTRY(entry), obj->alias);
	gtk_widget_grab_focus(entry);

	// 엔터/포커스아웃 시 편집 완료
	g_signal_connect(entry, "activate", G_CALLBACK(on_edit_alias_commit), self);
	g_signal_connect(entry, "focus-out-event", G_CALLBACK(on_edit_alias_commit), self);

	gtk_list_item_set_child(item, entry);
}

// 편집 완료 시 호출
static gboolean on_edit_alias_commit(GtkWidget* entry, GdkEvent* event, gpointer user_data)
{
	MoveDialog* self = (MoveDialog*)user_data;
	guint row = self->selected_index;
	GtkColumnView* view = GTK_COLUMN_VIEW(self->move_list);
	GtkListItem* item = gtk_column_view_get_row(view, row);
	if (!item) return FALSE;

	MoveObject* obj = gtk_list_item_get_item(item);
	if (!obj) return FALSE;

	const char* new_alias = gtk_entry_get_text(GTK_ENTRY(entry));
	if (g_strcmp0(obj->alias, new_alias) != 0)
	{
		g_free(obj->alias);
		obj->alias = g_strdup(new_alias);
		self->modified = true;
		// 필요시 movloc_update(obj->no, obj->alias, obj->folder);
	}

	// Entry를 Label로 교체
	GtkWidget* label = gtk_label_new(obj->alias);
	gtk_widget_set_halign(label, GTK_ALIGN_START);
	gtk_list_item_set_child(item, label);

	return FALSE;
}

if (keyval == GDK_KEY_F2)
{
	if (self->selected_index != GTK_INVALID_LIST_POSITION)
		start_edit_alias(self, self->selected_index);
	return TRUE;
}
#endif
